// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cfmobile/gopivnet/resource"
)

type FakeReleaseRequester struct {
	GetProductStub        func(productName string) (*resource.Product, error)
	getProductMutex       sync.RWMutex
	getProductArgsForCall []struct {
		productName string
	}
	getProductReturns struct {
		result1 *resource.Product
		result2 error
	}
	GetProductFilesStub        func(release resource.Release) (*resource.ProductFiles, error)
	getProductFilesMutex       sync.RWMutex
	getProductFilesArgsForCall []struct {
		release resource.Release
	}
	getProductFilesReturns struct {
		result1 *resource.ProductFiles
		result2 error
	}
	GetProductDownloadUrlStub        func(productFile *resource.ProductFile) (string, error)
	getProductDownloadUrlMutex       sync.RWMutex
	getProductDownloadUrlArgsForCall []struct {
		productFile *resource.ProductFile
	}
	getProductDownloadUrlReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeReleaseRequester) GetProduct(productName string) (*resource.Product, error) {
	fake.getProductMutex.Lock()
	fake.getProductArgsForCall = append(fake.getProductArgsForCall, struct {
		productName string
	}{productName})
	fake.getProductMutex.Unlock()
	if fake.GetProductStub != nil {
		return fake.GetProductStub(productName)
	} else {
		return fake.getProductReturns.result1, fake.getProductReturns.result2
	}
}

func (fake *FakeReleaseRequester) GetProductCallCount() int {
	fake.getProductMutex.RLock()
	defer fake.getProductMutex.RUnlock()
	return len(fake.getProductArgsForCall)
}

func (fake *FakeReleaseRequester) GetProductArgsForCall(i int) string {
	fake.getProductMutex.RLock()
	defer fake.getProductMutex.RUnlock()
	return fake.getProductArgsForCall[i].productName
}

func (fake *FakeReleaseRequester) GetProductReturns(result1 *resource.Product, result2 error) {
	fake.GetProductStub = nil
	fake.getProductReturns = struct {
		result1 *resource.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseRequester) GetProductFiles(release resource.Release) (*resource.ProductFiles, error) {
	fake.getProductFilesMutex.Lock()
	fake.getProductFilesArgsForCall = append(fake.getProductFilesArgsForCall, struct {
		release resource.Release
	}{release})
	fake.getProductFilesMutex.Unlock()
	if fake.GetProductFilesStub != nil {
		return fake.GetProductFilesStub(release)
	} else {
		return fake.getProductFilesReturns.result1, fake.getProductFilesReturns.result2
	}
}

func (fake *FakeReleaseRequester) GetProductFilesCallCount() int {
	fake.getProductFilesMutex.RLock()
	defer fake.getProductFilesMutex.RUnlock()
	return len(fake.getProductFilesArgsForCall)
}

func (fake *FakeReleaseRequester) GetProductFilesArgsForCall(i int) resource.Release {
	fake.getProductFilesMutex.RLock()
	defer fake.getProductFilesMutex.RUnlock()
	return fake.getProductFilesArgsForCall[i].release
}

func (fake *FakeReleaseRequester) GetProductFilesReturns(result1 *resource.ProductFiles, result2 error) {
	fake.GetProductFilesStub = nil
	fake.getProductFilesReturns = struct {
		result1 *resource.ProductFiles
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseRequester) GetProductDownloadUrl(productFile *resource.ProductFile) (string, error) {
	fake.getProductDownloadUrlMutex.Lock()
	fake.getProductDownloadUrlArgsForCall = append(fake.getProductDownloadUrlArgsForCall, struct {
		productFile *resource.ProductFile
	}{productFile})
	fake.getProductDownloadUrlMutex.Unlock()
	if fake.GetProductDownloadUrlStub != nil {
		return fake.GetProductDownloadUrlStub(productFile)
	} else {
		return fake.getProductDownloadUrlReturns.result1, fake.getProductDownloadUrlReturns.result2
	}
}

func (fake *FakeReleaseRequester) GetProductDownloadUrlCallCount() int {
	fake.getProductDownloadUrlMutex.RLock()
	defer fake.getProductDownloadUrlMutex.RUnlock()
	return len(fake.getProductDownloadUrlArgsForCall)
}

func (fake *FakeReleaseRequester) GetProductDownloadUrlArgsForCall(i int) *resource.ProductFile {
	fake.getProductDownloadUrlMutex.RLock()
	defer fake.getProductDownloadUrlMutex.RUnlock()
	return fake.getProductDownloadUrlArgsForCall[i].productFile
}

func (fake *FakeReleaseRequester) GetProductDownloadUrlReturns(result1 string, result2 error) {
	fake.GetProductDownloadUrlStub = nil
	fake.getProductDownloadUrlReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ resource.ReleaseRequester = new(FakeReleaseRequester)
